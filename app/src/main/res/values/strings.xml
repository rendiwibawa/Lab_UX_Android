<resources>
    <string name="app_name">Lab UX</string>

    <string name="choose_payment_prompt">Choose Payment</string>

    <string-array name="payment_methods">
        <item>Visa</item>
        <item>Master Card</item>
        <item>Credit Card</item>
    </string-array>

    <string name="BrickKit">A thin wrapper around a millisecond value that allows JDBC to identify this as an SQL DATE
        value. A milliseconds value represents the number of milliseconds that have passed since January 1, 1970 00:00:00.000 GMT.
        To conform with the definition of SQL DATE, the millisecond values wrapped by a java.sql.Date instance
        must be normalized by setting the hours, minutes, seconds, and milliseconds to zero in the particular time zone with which the instance is associated.
        </string>

    <string name="WaterCraftKit">A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars.
        The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar.
        The smaller RatingBar style ( R.attr.ratingBarStyleSmall) and the larger indicator-only style
        (R.attr.ratingBarStyleIndicator) do not support user interaction and should only be used as indicators.
        When using a RatingBar that supports user interaction, placing widgets to the left or right of the
        RatingBar is discouraged.</string>

    <string name="SurvivalKit">A TextView displays text to the user and optionally allows them to edit it.
        A TextView is a complete text editor, however the basic class is configured to not allow editing.
        </string>

    <string name="PlatformerKit">The Android framework includes support for various cameras and camera features
        available on devices, allowing you to capture pictures and videos in your applications.
        This document discusses a quick, simple approach to image and video capture and outlines an advanced
        approach for creating custom camera experiences for your users.</string>

    <string name="MarbleKit">RecyclerView is the ViewGroup that contains the views corresponding to your data.
        Its a view itself so you add RecyclerView into your layout the way you would add any other UI element.
        Each individual element in the list is defined by a view holder object.
        RecyclerView is a ViewGroup added to the android studio as a successor of the GridView and ListView.
        It is an improvement on both of them and can be found in the latest v-7 support packages.
        It has been created to make possible construction of any lists with XML layouts as an item
        which can be customized vastly while improving on the efficiency of ListViews and GridViews.
    </string>
    <string name="warning_icon">Warning Ini</string>

    <!-- to toggle the open close button of the navigation drawer -->
    <string name="nav_open">Open</string>
    <string name="nav_close">Close</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="large_text">
        "Material is the metaphor.\n\n"

        "A material metaphor is the unifying theory of a rationalized space and a system of motion."
        "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
        "technologically advanced and open to imagination and magic.\n"
        "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
        "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
        "flexibility of the material creates new affordances that supercede those in the physical "
        "world, without breaking the rules of physics.\n"
        "The fundamentals of light, surface, and movement are key to conveying how objects move, "
        "interact, and exist in space and in relation to each other. Realistic lighting shows "
        "seams, divides space, and indicates moving parts.\n\n"

        "Bold, graphic, intentional.\n\n"

        "The foundational elements of print based design typography, grids, space, scale, color, "
        "and use of imagery guide visual treatments. These elements do far more than please the "
        "eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
        "imagery, large scale typography, and intentional white space create a bold and graphic "
        "interface that immerse the user in the experience.\n"
        "An emphasis on user actions makes core functionality immediately apparent and provides "
        "waypoints for the user.\n\n"

        "Motion provides meaning.\n\n"

        "Motion respects and reinforces the user as the prime mover. Primary user actions are "
        "inflection points that initiate motion, transforming the whole design.\n"
        "All action takes place in a single environment. Objects are presented to the user without "
        "breaking the continuity of experience even as they transform and reorganize.\n"
        "Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
        "Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

        "3D world.\n\n"

        "The material environment is a 3D space, which means all objects have x, y, and z "
        "dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
        "positive z-axis extending towards the viewer. Every sheet of material occupies a single "
        "position along the z-axis and has a standard 1dp thickness.\n"
        "On the web, the z-axis is used for layering and not for perspective. The 3D world is "
        "emulated by manipulating the y-axis.\n\n"

        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>
    <string name="conditions">By purchasing virtual assets in AXForAsset, you agree to these Terms. If you do not agree, please do not purchase or use the Assets.

1. License to Use
Upon purchase, you are granted a limited, non-transferable, non-sublicensable, revocable license to use the Assets solely within the App.

2. Restrictions
You may not sell, trade, transfer, or otherwise dispose of the Assets to any other person or entity. Any attempt to do so may result in the suspension or termination of your account.

3. No Refunds
All purchases of Assets are final and non-refundable, except as required by applicable law.

4. Intellectual Property Rights
All Assets are the property of AXForAssets and are protected by intellectual property laws. You do not acquire any ownership rights in the Assets through your purchase.

5. Changes to Conditions
We reserve the right to modify these Conditions at any time. Any changes will be effective immediately upon posting within the App. Your continued use of the Assets following any changes indicates your acceptance of the revised Conditions.

6. Limitation of Liability
To the fullest extent permitted by law, AXForAssets shall not be liable for any indirect, incidental, special, consequential, or punitive damages arising out of or related to your purchase or use of the Assets.

7. Governing Law
These Conditions shall be governed by and construed in accordance with the laws of Indonesia, without regard to its conflict of law principles.</string>
    <string name="terms">By purchasing virtual assets in AXForAsset, you agree to these Terms. If you do not agree, please do not purchase or use the Assets.\n\n1. You must be at least 18 years old or have parental consent if you are under the age of majority in your jurisdiction.\n\n2. Purchases of Assets can be made using the payment methods available in the App, including credit/debit cards and third-party payment platforms.\n\n3. All prices for Assets are displayed in dollars and are subject to change without notice.\n\n4. By providing a payment method, you authorize us to charge the total amount of your purchase to that payment method.</string>
</resources>